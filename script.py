import csv
import requests
import time 
import json
from datetime import datetime

print("Welcome to this banano transaction calculator")
print("Please take note, that I take no responsability for any incorrect data generated by this")
print("If you are planning on using this, please verify the correctness of the generated data yourself")

address = input("Enter the banano address for which you want to generate the report: ") 
desired_currency = input("Please enter the currency you would like to use: ")

print("")
print("By default, the timestamp in the banano transactions, and thus the report will be based on the timestamp of the block when you generated it.")
print("This means in the case of receive transactions, that there can be a major difference between the actual time the transaction was sent and the time in the block.")
print("If you would like this script to search for the send timestamp (this will be a slow process, since we it takes 1 minute to correct 5 receive transactions due to API rate limits) please answer Yes to the following")
exact_timestamps = input("Process stage two (Yes or No): ")
print("")


#A. Mining income 
mining_addresses = {"ban_3fo1d1ng6mfqumfoojqby13nahaugqbe5n6n3trof4q8kg5amo9mribg4muo":"folding@home","ban_1boompow14irck1yauquqypt7afqrh8b6bbu5r93pc6hgbqs7z6o99frcuym":"bpow","ban_1nice4sy9fgcb8qxbx7nkj9ajc79aapqnayrfk4gow184mgnfm49ncstg36w":"nicebanano"}
#B. Airdrops/faucets
faucet_addresses = {"ban_1faucetjuiyuwnz94j4c7s393r95sk5ac7p5usthmxct816osgqh3qd1caet":"reddit_faucet","ban_1jung1eb3uomk1gsx7w6w7toqrikxm5pgn5wbsg5fpy96ckpdf6wmiuuzpca":"jungletv","ban_3346kkobb11qqpo17imgiybmwrgibr7yi34mwn5j6uywyke8f7fnfp94uyps":"prussia","ban_3hotwkr9xuk8c9eixqafn8jf8oxzwagc8rtrgmuf973s5c96hp4g9ix3jw9c":"walker","ban_1s1hot8adygxuj96f35dicnmd47cctazoaiia9uduk731nqt6fuenfax9ckt":"slots","ban_1monkeyt1x77a1rp9bwtthajb8odapbmnzpyt8357ac8a1bcron34i3r9y66":"monkeytalks","ban_1jtpriyhu81qdydugsgtym9drsw5en6m65nh3mnukwjdd6qmbkc9wa3gjhnr":"JTV","ban_1jtprixunfus5mozkzj5gtfm79b54p3pwnje8snh9ugu998cfk13qceepwn5":"JTV","ban_1jtweetz1myhj9xp8g5esgsefb78c6pmj9hge6agf37q1x88euhd71nscss6":"JTV","ban_1jung1eb3uomk1gsx7w6w7toqrikxm5pgn5wbsg5fpy96ckpdf6wmiuuzpca":"JTV",
"ban_3grainskdett8tscjapuhig5m8fui5gi6th437sbnpot7mqw7qdmrb9rghfj":"freerice","ban_3freefkgfnazw7ajt1xyqgmijsjb9oc3mykm18pewy11wd7twd5hf4cbxekh":"freerice", "ban_1rp3ke75c8a3t5mkzekibo8w4mxzydrie8xzwqmkajfk9ww76f7wzbhd5bmt":"Getbanano.cc"}
#C. 
exchange_addresses = {"ban_1ddaz5y8jk47hkicpi1kc38kg359r74y38gmmq6moiki11gx1g4a9qb4r7c6":"moon_banano_trade","ban_1oaocnrcaystcdtaae6woh381wftyg4k7bespu19m5w18ze699refhyzu6bo":"Kuyumcu"} 
#D. Other addresses
other_addr={"ban_3imophzbk9ruq3ju18jyw37376h3wdeon15asw4yj3kfgxs6m1eg7784a4im":"tipcc","ban_3po1yhotz68w6mogy6budr7g8y7gw5wjqhbgc5gt549emeoof9npf315xmn4":"poly wban","ban_1wbanktxc5mtnydsjq6doy81wsnn7fw1z7yzw4zzieb6dfkihjtbwzgrxt9i":"wban bsc"}


def try_request(request,data={},is_post=False,backoff = 0):
    try:
        if is_post:
            r = requests.post(request,json=data,timeout=4.2)
        else:
            r = requests.get(request,json=data,timeout=4.2)
        return r 
    except:
        time.sleep(6.9 + 9.1 * backoff)
        return try_request(request,data,is_post,backoff + 1)


#1. Download account export from yellowspyglass -> account_export.csv
def stageone():
    print("Stage one: Downloading account export from yellowspyglass, and saving it in account_export.csv")
    with open("account_export.csv",'wb') as export:
        r = try_request('https://api.spyglass.pw/banano/v1/account/export',{"address":address.rstrip()},True)
        export.write(r.content)

#2. For each receive: Query corresponding send dates  

#get https://spyglass-api.web.app/account/block hash 
#-> contents -> link 
#get https://spyglass-api.web.app/account/block link_hash 
# -> timestamp 
#-> account_export_adjusted_dates.csv  
def stagetwo():
    if exact_timestamps != "Yes" and exact_timestamps != "yes":
        skip_exact = True 
        print("Stage 2: Skipping the querying, timestamps will not be perfectly accurate")
    else:
        skip_exact = False
        print("Running stage two, querying Yellow Spyglass to find the exact receive transactions")
    with open("account_export.csv",'r',newline='') as export:
        with open("account_export_adjusted_dates.csv",'w',newline='') as output:
            reader = csv.reader(export,delimiter=",")
            writer = csv.writer(output,delimiter=",")
            for row in reader:
                if row[0] == "hash":
                    row.append("send_timestamp")
                else:
                    if row[2] == "receive" and (not skip_exact): 
                        blockhash = row[0]                        
                        r = try_request('https://api.spyglass.pw/banano/v1/block/'+blockhash)
                        block = json.loads(r.content)
                        sendhash = block['contents']['link']
                        r = try_request('https://api.spyglass.pw/banano/v1/block/'+sendhash)
                        sendblock = json.loads(r.content)
                        row.append(sendblock['timestamp'])
                        time.sleep(12)
                        print("Just did another receive transaction, please don't terminate the script, it is still running!")
                    else:
                        row.append(row[4])
                writer.writerow(row)


#3. For each transaction: Query coingecko for price date 
#https://algotrading101.com/learn/coingecko-api-guide/ 
#cg.get_price(id='banano', vs_currencies=desired_currency,from_timestamp='timestamp',to_timestamp=int(timestamp) + 1)
#csv -> transaction, from, time, ban_price_cur, amount_ban, price_in_desired_currency
def stagethree():
    print("Stage 3: Query Coingecko for the price date at the transaction time")
    print("Note we are limited to 50 transactions per minute, so this process may take a while")
    with open("account_export_adjusted_dates.csv",'r',newline='') as export:
        with open("account_export_withprice.csv",'w',newline='') as output:
            reader = csv.reader(export,delimiter=",")
            writer = csv.writer(output,delimiter=",")
            for row in reader:
                if row[0] == "hash":
                    row.append("ban_price_in_"+desired_currency)
                    row.append("Transaction_value_in_"+desired_currency)
                else:
                    if row[2] != "change": 
                        timestamp = row[9]
                        for i in range(0,5): #retry with growing intervals in case coingecko is being weird.
                            try:
                                #/coins/{id}/market_chart/range
                                #data = cg.get_coin_market_chart_range_by_id(id='banano',vs_currency=desired_currency,from_timestamp=timestamp,to_timestamp=int(timestamp)+5000*(i+1))
                                data = try_request('https://api.coingecko.com/api/v3/coins/banano/market_chart/range?vs_currency='+desired_currency+'&from='+str(timestamp)+'&to='+str(int(timestamp)+5000*(i+1))).json()
                                price = data['prices'][0][1]
                                break   
                            except IndexError:
                                print(i) 
                                print("Query to coingecko failed, retrying")
                                if i == 4:
                                    print("Unable to determine price for transaction with hash " + row[0] + ". Please manually fetch this data")
                                continue
                        row.append(price)
                        row.append(price*float(row[8]))
                        time.sleep(1.25)
                writer.writerow(row)

#4. Convert everything to right timezone
def stagefour():
    print("Stage 4: Converting to your local timezone")
    with open("account_export_withprice.csv",'r',newline='') as export:
        with open("account_export_filtered.csv",'w',newline='') as output:
            reader = csv.reader(export,delimiter=",")
            writer = csv.writer(output,delimiter=",")
            for row in reader:
                if row[0] == "hash":
                    row.append("Date")
                    row.append("Local Time")
                    writer.writerow(row)
                else:
                    timestamp = row[9]
                    realtime = datetime.fromtimestamp(int(timestamp))
                    if realtime.year == 2021:
                        row.append(realtime.strftime("%Y-%m-%d"))
                        row.append(realtime.strftime("%H:%M:%S.%f"))
                        writer.writerow(row)


#5. Categorise:

def stagefive():
    print("Stage 5: Categorising transactions into different files for mining, faucets, exchanges, and others")
    print("To change this, please open the script and adjust the address dictionaries in there")
    with open("account_export_filtered.csv",'r',newline='') as export:
        reader = csv.reader(export,delimiter=",")
        mining_transactions = open("mining_output.csv",'w',newline='')
        mining_writer = csv.writer(mining_transactions,delimiter=",")
        sum_mining = [0,0] #(recv,send)
        faucet_transactions = open("faucet_output.csv",'w',newline='')
        faucet_writer = csv.writer(faucet_transactions,delimiter=",")
        sum_faucet = [0,0] #(recv,send)
        exchange_transactions = open("exchange_output.csv",'w',newline='')
        exchange_writer = csv.writer(exchange_transactions,delimiter=",")
        sum_exchange = [0,0] #(recv,send)
        other_transactions = open("other_output.csv",'w',newline='')
        other_writer = csv.writer(other_transactions,delimiter=",")
        sum_other = [0,0] #(recv,send)
        for row in reader:
            if row[0] == "hash":
                other_writer.writerow(row)
                row.append("Description")
                mining_writer.writerow(row)
                faucet_writer.writerow(row)
                exchange_writer.writerow(row)
            else:
                if row[2] == "receive" or row[2] == "send": 
                    value = float(row[11])
                else: 
                    value = 0.0
                if row[1] in mining_addresses:
                    row.append(mining_addresses[row[1]])
                    if row[2] == "receive": 
                        sum_mining[0] += value
                    else:
                        sum_mining[1] += value
                    mining_writer.writerow(row)

                elif row[1] in faucet_addresses:
                    row.append(faucet_addresses[row[1]])
                    if row[2] == "receive": 
                        sum_faucet[0] += value
                    else:
                        sum_faucet[1] += value
                    faucet_writer.writerow(row)

                elif row[1] in exchange_addresses:
                    row.append(exchange_addresses[row[1]])
                    if row[2] == "receive": 
                        sum_exchange[0] += value
                    else:
                        sum_exchange[1] += value
                    exchange_writer.writerow(row)

                else:
                    if row[1] in other_addr:
                        row.append(other_addr[row[1]])
                    else:
                        row.append("Unknown")
                    if row[2] == "receive": 
                        sum_other[0] += value
                    else:
                        sum_other[1] += value
                    other_writer.writerow(row)
        base_array = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"Total sent: "]
        base_array = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"Total received: "]
        mining_writer.writerow(["Total sent: ", sum_mining[1], desired_currency])
        mining_writer.writerow(["Total received: ", sum_mining[0], desired_currency])
        faucet_writer.writerow(["Total sent: ", sum_faucet[1], desired_currency])
        faucet_writer.writerow(["Total received: ", sum_faucet[0], desired_currency])
        exchange_writer.writerow(["Total sent: ", sum_exchange[1], desired_currency])
        exchange_writer.writerow(["Total received: ", sum_exchange[0], desired_currency])
        other_writer.writerow(["Total sent: ", sum_other[1], desired_currency])
        other_writer.writerow(["Total received: ", sum_other[0], desired_currency])

        mining_transactions.close()
        faucet_transactions.close()
        exchange_transactions.close()
        other_transactions.close()
print("")
print("Enter in which stage (1-5) you would like to start the process. By default start with 1, although if you ran into some issues on a later stage you can restart at that stage")
start = int(input("Enter stage to start: "))
if start < 0 or start > 5: 
    print("Invalid number, starting from stage 1")
    start = 1 
print(start)
if start == 1:
    stageone()
if start <= 2: 
    stagetwo()
if start <= 3: 
    stagethree()
if start <= 4:
    stagefour()
if start <= 5:
    stagefive()
print("Script run completed succesfully")
